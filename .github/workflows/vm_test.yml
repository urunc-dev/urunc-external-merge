name: custom VM spawner 
on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ''
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      runc_version:
        required: true
        type: string
      containerd_version:
        required: true
        type: string
      cni_version:
        required: true
        type: string
      nerdctl_version:
        required: true
        type: string
      crictl_version:
        required: true
        type: string
      firecracker_version:
        required: true
        type: string
      solo5_version:
        required: true
        type: string
    secrets:
      GIT_CLONE_PAT:
        required: false

  workflow_dispatch:
  
jobs:
  prepare:
    name: VM test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        #archconfig: ["${{ fromJSON(inputs.runner-archs) }}"]
        test: ["test_ctr","test_nerdctl","test_crictl","test_docker"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
        cache: false

    - name: Set ref and repo from PR or dispatch
      id: set-ref
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then
          echo "ref=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"
          echo "repo=${{ github.event.pull_request.head.repo.full_name }}" >> "$GITHUB_OUTPUT"
          echo "vmnamestr=pr${{ github.event.pull_request.number }}" >> "$GITHUB_ENV"
        else
          echo "ref=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "repo=${{ github.repository }}" >> "$GITHUB_OUTPUT"
          echo "vmnamestr=manual" >> "$GITHUB_ENV"
        fi
    - name: Install base dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget build-essential libseccomp-dev pkg-config bc make qemu-system

    - name: Install runc
      run: |
        wget -q https://github.com/opencontainers/runc/releases/download/v${{ inputs.runc_version }}/runc.$(dpkg --print-architecture)
        sudo install -m 755 runc.$(dpkg --print-architecture) /usr/local/sbin/runc
        rm -f ./runc.$(dpkg --print-architecture)

    - name: Install containerd
      run: |
        wget -q https://github.com/containerd/containerd/releases/download/v${{ inputs.containerd_version }}/containerd-${{ inputs.containerd_version }}-linux-$(dpkg --print-architecture).tar.gz
        sudo tar Cxzvf /usr/local containerd-${{ inputs.containerd_version }}-linux-$(dpkg --print-architecture).tar.gz
        rm -f containerd-${{ inputs.containerd_version }}-linux-$(dpkg --print-architecture).tar.gz

    - name: Set up containerd service
      run: |
        wget -q https://raw.githubusercontent.com/containerd/containerd/v${{ inputs.containerd_version }}/containerd.service
        sudo rm -f /lib/systemd/system/containerd.service
        sudo mv containerd.service /lib/systemd/system/containerd.service
        sudo systemctl daemon-reload
        sudo systemctl enable --now containerd

    - name: Configure containerd
      run: |
        sudo mkdir -p /etc/containerd/
        sudo mv /etc/containerd/config.toml /etc/containerd/config.toml.bak || true
        sudo containerd config default | sudo tee /etc/containerd/config.toml
        sudo systemctl restart containerd

    - name: Setup devmapper
      run: |
        sudo mkdir -p /usr/local/bin/scripts
        sudo cp script/dm_create.sh /usr/local/bin/scripts/dm_create.sh
        sudo chmod 755 /usr/local/bin/scripts/dm_create.sh
        sudo /usr/local/bin/scripts/dm_create.sh
        sudo sed -i "/\[plugins\.'io\.containerd\.snapshotter\.v1\.devmapper'\]/,/^$/d" /etc/containerd/config.toml
        sudo tee -a /etc/containerd/config.toml > /dev/null <<'EOT'
        [plugins.'io.containerd.snapshotter.v1.devmapper']
          pool_name = "containerd-pool"
          root_path = "/var/lib/containerd/io.containerd.snapshotter.v1.devmapper"
          base_image_size = "10GB"
          fs_type = "ext2"
        EOT
        sudo tee -a /etc/containerd/config.toml > /dev/null <<EOT
        [plugins.'io.containerd.cri.v1.runtime'.containerd.runtimes.urunc]
            runtime_type = "io.containerd.urunc.v2"
            container_annotations = ["com.urunc.unikernel.*"]
            pod_annotations = ["com.urunc.unikernel.*"]
            snapshotter = "devmapper"
        EOT
        sudo systemctl restart containerd


    - name: Install CNI plugins
      run: |
        wget -q https://github.com/containernetworking/plugins/releases/download/v${{ inputs.cni_version }}/cni-plugins-linux-$(dpkg --print-architecture)-v${{ inputs.cni_version }}.tgz
        sudo mkdir -p /opt/cni/bin
        sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-$(dpkg --print-architecture)-v${{ inputs.cni_version }}.tgz
        rm -f cni-plugins-linux-$(dpkg --print-architecture)-v${{ inputs.cni_version }}.tgz

    - name: Install nerdctl
      run: |
        NERDCTL_VERSION=$(curl -L -s -o /dev/null -w '%{url_effective}' "https://github.com/containerd/nerdctl/releases/latest" | grep -oP "v\d+\.\d+\.\d+" | sed 's/v//')
        wget -q https://github.com/containerd/nerdctl/releases/download/v${{ inputs.nerdctl_version }}/nerdctl-${{ inputs.nerdctl_version }}-linux-$(dpkg --print-architecture).tar.gz
        sudo tar Cxzvf /usr/local/bin nerdctl-${{ inputs.nerdctl_version }}-linux-$(dpkg --print-architecture).tar.gz
        rm -f nerdctl-${{ inputs.nerdctl_version }}-linux-$(dpkg --print-architecture).tar.gz

    - name: Install crictl
      run: |
        wget https://github.com/kubernetes-sigs/cri-tools/releases/download/${{ inputs.crictl_version }}/crictl-${{ inputs.crictl_version }}-linux-amd64.tar.gz
        sudo tar zxvf crictl-${{ inputs.crictl_version }}-linux-amd64.tar.gz -C /usr/local/bin
        rm -f crictl-${{ inputs.crictl_version }}-linux-amd64.tar.gz
        sudo tee -a /etc/crictl.yaml > /dev/null <<'EOT'
        runtime-endpoint: unix:///run/containerd/containerd.sock
        image-endpoint: unix:///run/containerd/containerd.sock
        timeout: 20
        EOT


    - name: Install Firecracker
      run: |
        ARCH="$(uname -m)"
        release_url="https://github.com/firecracker-microvm/firecracker/releases"
        curl -L ${release_url}/download/${{ inputs.firecracker_version }}/firecracker-${{ inputs.firecracker_version }}-${ARCH}.tgz | tar -xz
        # Rename the binary to "firecracker"
        sudo mv release-${{ inputs.firecracker_version }}-${ARCH}/firecracker-${{ inputs.firecracker_version }}-${ARCH} /usr/local/bin/firecracker
        rm -fr release-${{ inputs.firecracker_version }}-${ARCH}

    - name: Install solo5
      run: |
        git clone -b ${{ inputs.solo5_version }} https://github.com/Solo5/solo5.git
        cd solo5
        ./configure.sh  && make -j$(nproc)
        sudo cp tenders/hvt/solo5-hvt /usr/local/bin
        sudo cp tenders/spt/solo5-spt /usr/local/bin

    - name: Install urunc
      id: install-urunc
      run: |
        wget https://s3.nbfc.io/nbfc-assets/github/urunc/dist/${{ steps.set-ref.outputs.ref }}/amd64/containerd-shim-urunc-v2_static_amd64
        wget https://s3.nbfc.io/nbfc-assets/github/urunc/dist/${{ steps.set-ref.outputs.ref }}/amd64/urunc_static_amd64
        chmod +x urunc_static_amd64
        chmod +x containerd-shim-urunc-v2_static_amd64
        sudo mv urunc_static_amd64 /usr/local/bin/urunc
        sudo mv containerd-shim-urunc-v2_static_amd64 /usr/local/bin/containerd-shim-urunc-v2
        urunc --version

    - name: Add runner user to KVM group
      id: kvm-setup
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        sudo usermod -a -G kvm $USER


    - name: Run ${{ matrix.test }}
      id: test
      if: ${{ !cancelled() }}
      run: |
        sudo make ${{ matrix.test }}
